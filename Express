const express = require('express');
const { Pool } = require('pg');
const app = express();
app.use(express.json());

// PostgreSQL connection configuration
const pool = new Pool({
  user: 'your_username',
  host: 'localhost',
  database: 'your_database',
  password: 'your_password',
  port: 5432,
});

// Create users table (run once)
const createTable = `
  CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    age INTEGER
  );
`;
pool.query(createTable, (err, res) => {
  if (err) console.error('Error creating table:', err);
  else console.log('Users table created or already exists');
});

// API Endpoints

// GET /users - Get all users
app.get('/users', (req, res) => {
  pool.query('SELECT * FROM users', (err, result) => {
    if (err) {
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.json(result.rows);
    }
  });
});

// GET /users/:id - Get a specific user
app.get('/users/:id', (req, res) => {
  const { id } = req.params;
  pool.query('SELECT * FROM users WHERE id = $1', [id], (err, result) => {
    if (err) {
      res.status(500).json({ error: 'Internal server error' });
    } else if (result.rows.length === 0) {
      res.status(404).json({ error: 'User not found' });
    } else {
      res.json(result.rows[0]);
    }
  });
});

// POST /users - Create a new user
app.post('/users', (req, res) => {
  const { name, email, age } = req.body;
  pool.query(
    'INSERT INTO users (name, email, age) VALUES ($1, $2, $3) RETURNING *',
    [name, email, age],
    (err, result) => {
      if (err) {
        res.status(500).json({ error: 'Internal server error' });
      } else {
        res.status(201).json(result.rows[0]);
      }
    }
  );
});

// PUT /users/:id - Update a user
app.put('/users/:id', (req, res) => {
  const { id } = req.params;
  const { name, email, age } = req.body;
  pool.query(
    'UPDATE users SET name = $1, email = $2, age = $3 WHERE id = $4 RETURNING *',
    [name, email, age, id],
    (err, result) => {
      if (err) {
        res.status(500).json({ error: 'Internal server error' });
      } else if (result.rows.length === 0) {
        res.status(404).json({ error: 'User not found' });
      } else {
        res.json(result.rows[0]);
      }
    }
  );
});

// DELETE /users/:id - Delete a user
app.delete('/users/:id', (req, res) => {
  const { id } = req.params;
  pool.query('DELETE FROM users WHERE id = $1 RETURNING *', [id], (err, result) => {
    if (err) {
      res.status(500).json({ error: 'Internal server error' });
    } else if (result.rows.length === 0) {
      res.status(404).json({ error: 'User not found' });
    } else {
      res.json({ message: 'User deleted' });
    }
  });
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
})
